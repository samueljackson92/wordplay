#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble

\end_preamble
\use_default_options true
\begin_modules
endnotes
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman utopia
\font_sans helvet
\font_typewriter courier
\font_default_family rmdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\footskip 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip bigskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\bullet 1 0 9 -1
\bullet 2 0 0 -1
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title

\size giant
CS211 Assignment 1 - Word Play
\end_layout

\begin_layout Author

\size larger
Samuel Jackson - slj11@
\lang british
aber
\lang english
.ac.uk
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
This is the supplied documentation for the CS211 assignment called word
 play.
 For this assignment I have to solve the problem of both generating word
 ladders and discovering the shortest path word ladder between two different
 words of the same length.
 This documentation outlines my approach to solving the given problem descriptio
n, including my design, algorithms and evidence of testing.
\end_layout

\begin_layout Section
Design
\end_layout

\begin_layout Standard
In this section, I outline the design that I propose to use to solve the
 given problem in this assignment.
 Below I give UML class and use case diagrams as an outline for the proposed
 solution, including the accompanying GUI, as well as brief description
 of each class in the system, followed by a justification for the data structure
s used in my design.
\end_layout

\begin_layout Subsection
UML Use Case Diagram
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename WordPlay_UseCase.png
	scale 80

\end_inset


\end_layout

\begin_layout Standard
Above is a UML use case diagram for this project.
 For the most part, this diagram is self explanatory, however there are
 a few key points that I would like to clarify.
 The word list extends from the build graph scenario because the user may
 want to build or rebuild the graph when the list of words may not already
 be loaded from a file.
 In this case, the file must be loaded first.
 The scenario of being able to 
\begin_inset Quotes eld
\end_inset

export to Gephi
\begin_inset Quotes erd
\end_inset

 is that I plan to add the functionality to export the graph data structure
 as a XML file readable by the Gephi graph visualization program.
 This will be useful during the development and testing of the application
 (to ensure I really have found a shortest path) as well as a useful novelty.
 The save log feature would also be able to allow the user to output the
 log generated by the proposed GUI to be saved to file.
\end_layout

\begin_layout Subsection
UML Class Diagram
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename WordPlay_UML.png
	lyxscale 50
	scale 45

\end_inset


\end_layout

\begin_layout Subsubsection
Description of the class diagram
\end_layout

\begin_layout Itemize

\series bold
Main Window
\series default
 - The main window class is the main JFrame window for the application's
 GUI, as well as being the main entry point for the program.
 The purpose of this class is simply to build the components of the main
 window, assign them a listener object and deal with displaying the GUI
 to the user.
 I have added a couple of additional methods to this class which are used
 by the main window listener class.
 The update output method is used to append text to the program log in the
 main window.
 The get log method is used to get a contents of the program log so that
 the main window listener can pass it to the file IO class for exporting.
 
\end_layout

\begin_layout Itemize

\series bold
MainWindowListener 
\series default
- The main window listener responds to all events created by the main window
 of the application.
 This includes loading a word file, building a graph object, exporting data
 to files etc.
 This class is also responsible for checking that what the user inputs is
 valid and that the user cannot do something illogical (such as traverse
 a graph before it has been built).
 
\end_layout

\begin_layout Itemize

\series bold
FileIO
\series default
 - The file IO class is responsible for getting and outputting data to and
 from the file system.
 Functions of this class include loading a list of words of an equal number
 of characters into the program, writing the output of the GUI log to a
 file and exporting a graph object into an XML format compatible with the
 Gephi graph visualization program.
 This last function will come in handy when developing the graph traversal
 algorithms, as I will be able to use Gephi to check that my algorithm correctly
 identifies shortest paths and handles unconnected graphs.
\end_layout

\begin_layout Itemize

\series bold
AbstractGraph
\series default
 - The abstract graph class is the most important class in this design.
 It is a data structure which is designed to represent a graph consisting
 of nodes and edges.
 The internal design for the representation of a graph uses an adjacency
 list
\begin_inset CommandInset citation
LatexCommand cite
key "aho+hopcroft+ullman"

\end_inset

 implemented using a hashtable of all the keys to the nodes in the graph
 along with a node object which contains a list of this keys to other nodes
 in the graph.
 I have designed this class to use a generic for the key type of the hashtable
 as I want to make this class as flexible and reusable as possible.
 In the case of our problem, I will be using strings as the key.
 This class will also contain methods for accessing nodes stored within
 the graph object, so that the user does not have to call the get node method
 every time they wish to access some node data.
\end_layout

\begin_layout Itemize

\series bold
WordLadderGraph 
\series default
- This class is where most of the major graph manipulation occurs.
 The word ladder graph class is the implementation point for creating and
 traversing the graph data structure.
 The two major functions required in the problem description (word ladder
 generation and discovery) will be implemented in this class.
 In order to traverse the graph, it is planned that these operations will
 require the implementation of a depth-limited search for generation and
 A* search for discovery (see 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Algorithms"

\end_inset

).
 This class also contains the make graph method which builds a graph out
 of the list of loaded words.
 Note that the search algorithms in this class will return a stack of nodes
 representing the path, as they both work backwards from the goal node.
 Therefore all nodes should be in the right order with the top element represent
ing the first node in the path.
\end_layout

\begin_layout Itemize

\series bold
Node 
\series default
- The node class is used to represent a single node (vertex) within the
 graph data structure.
 This contains data about the node (such as it's key, path cost and distance-cos
t estimate data during a given traversal of the graph) as well a linked
 list of the neighbors connected to this particular node.
 I have designed this class to also use a generic type for the keys stored.
 This again makes Graph/Node system more reusable as they do not necessarily
 have to use a String as a key in a different implementation situation.
\end_layout

\begin_layout Subsection
Justification of Data Structures
\end_layout

\begin_layout Standard
There are two key data structures that I plan to use to implement in my
 design to solve the given problem.
 The first data structure is a hashtable.
 For my solution I will be using the hashtable data structure that comes
 supplied with the Java standard library.
 As mentioned in the preceding section, I plan to use a hashtable to store
 string variable as a key and a node object as the value for that key.
 My justification for using a hashtable is that I want to be able to quickly
 lookup words to find information stored at their associated node.
 Using a hashtable is therefore quicker for this purpose as we do not have
 to potentially iterate through the graph every time we wish to access a
 node.
\end_layout

\begin_layout Standard
My reason for having a node object as the entry value of the hashtable rather
 than simply having a linked list of neighbor nodes (as in the basic implementat
ion of an adjacency list) is that the node object provides a convenient
 place to store data about this particular node, other than simply listing
 it's neighbors.
 In my implementation, this allows me to store whether the node has been
 visited during a given traversal of the graph, its key and path cost data,
 but could be used in future implementations to store other types of data
 as easily as extending the node class.
\end_layout

\begin_layout Standard
The adjacency list data structure represented by both the abstract graph
 and node classes provide an elegant and easily implemented solution to
 the problem of representing the graph structure that will be generated
 from a given input file of words.
 However, this graph/node data structure implementation is designed to have
 low coupling with the rest of the system, meaning that it can easily be
 lifted from this project and reused in future development.
\end_layout

\begin_layout Standard
The graph/node pair also exhibits high cohesion.
 Both of these classes only contain methods used for building and accessing
 data in the graph structure, but will not implement any details regarding
 the rules about how the graph structure should be built or how it should
 be traversed, as these functions differ depending upon the intended use
 of the graph.
 In this system, these details are instead delegated to the concrete word
 ladder graph class which will actually build the graph and implement the
 specific search algorithms required to solve the given word ladder problems.
 One downside to this approach is that the node and abstract graph classes
 exhibit high coupling between each other.
 However, seeing as they are jointly supposed to represent a single data
 structure (a graph), I feel that this is a permissible exception as they
 are mainly designed to work in unison.
\end_layout

\begin_layout Standard
In conclusion, I believe that my design for the system represents a simple
 and efficient way of internally representing the data required by the applicati
on to solve the word ladder problem.
 I also feel that this structure should allow me to create a system that
 exhibits principals of both high cohesion and low coupling, as the underlying
 data structure could be lifted directly out of this program and applied
 to future programs with ease.
 Furthermore, I feel that this design could easily be extended further.
 The abstract graph class could easily be used as the basis for both directed
 and undirected graphs and the node class could be extended to add any extra
 data or functionality that a given problem might require beyond the scope
 of this program.
\end_layout

\begin_layout Subsection
Algorithms
\begin_inset CommandInset label
LatexCommand label
name "sub:Algorithms"

\end_inset


\end_layout

\begin_layout Standard
This section outlines the algorithms which I intend to use as part of my
 solution to the word ladders problem.
 My choice of algorithms to traverse the graph was to use a depth-limited
 search for the generation of word ladders, and to use an A* search for
 the discovery of nodes from a start point to a goal point.
 What follows is a pseudo code listing of the algorithms that I plan to
 use to traverse the graph data structure.
\end_layout

\begin_layout Standard
\noindent
Listing 1 shows the pseudo code for the generation part of my algorithm.
 This simply runs an instance of the depth-limited search algorithm, but
 without a target node.
 This means that it will go as deep into the graph as quickly as possible,
 until it reaches the target depth or fails to find a path of the given
 depth.
 The generation function will return an empty path if the desired number
 of steps could not be reached.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

function generate(word, depth) {
\end_layout

\begin_layout Plain Layout

	path = empty stack;
\end_layout

\begin_layout Plain Layout

	result = depthLimitedSearch(word, 0, depth);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	if (result is a solution) {
\end_layout

\begin_layout Plain Layout

		path = push word;
\end_layout

\begin_layout Plain Layout

	} else (path size is less than desired steps) {
\end_layout

\begin_layout Plain Layout

		path = empty stack;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	reset distances in graph;
\end_layout

\begin_layout Plain Layout

	return path;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Word Ladder generation function.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The next pseudo code listing in this section shows the real guts of the
 algorithm I propose to use to solve the generation problem.
 This is a modified implementation for the recursive function for a depth-limite
d search algorithm as described in AI: a modern approach
\begin_inset CommandInset citation
LatexCommand cite
key "russell+norvig"

\end_inset

.
 The major modification being that this search can only return two states:
 whether we succeeded or failed to generate a word ladder of the target
 depth, as opposed to Russell and Norvig's three states (solution found,
 failed and cutoff).
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "extendedchars=true,language=Java,numbers=left,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

function depthLimitedSearch(word, depth, maxdepth) {
\end_layout

\begin_layout Plain Layout

	result = failed;	
\end_layout

\begin_layout Plain Layout

	if(word not visited) {
\end_layout

\begin_layout Plain Layout

		set word visited;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	if(depth equal to maxdepth-1) {
\end_layout

\begin_layout Plain Layout

		result = success;
\end_layout

\begin_layout Plain Layout

	} else {
\end_layout

\begin_layout Plain Layout

		while (word has neighbors && result is failure) {
\end_layout

\begin_layout Plain Layout

			if(neighbor not visited) { 				
\end_layout

\begin_layout Plain Layout

				result = depthLimitedSearch(neighbor, (currentDepth+1), maxdepth);
\end_layout

\begin_layout Plain Layout

				if(result is success){
\end_layout

\begin_layout Plain Layout

					push child onto path stack;					
\end_layout

\begin_layout Plain Layout

				} 				
\end_layout

\begin_layout Plain Layout

			} 			
\end_layout

\begin_layout Plain Layout

		} 		
\end_layout

\begin_layout Plain Layout

	} 	
\end_layout

\begin_layout Plain Layout

	return result;
\end_layout

\begin_layout Plain Layout

}	
\end_layout

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Depth-Limited search algorithm used in generation mode.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The next two listings are for the discovery function which will use an A*
 search to find the shortest path between two nodes in the graph.
 The proposed A* search algorithm outlined below will take into account
 the distance traveled into the graph as the path cost.
 For it's heuristic, it will use the Hamming distance between the node current
 being looked at and the goal node.
 The first listing shown below is the function which will be used to initiate
 the breadth-first search.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

function discovery(start, finish){	
\end_layout

\begin_layout Plain Layout

	path = empty stack;		
\end_layout

\begin_layout Plain Layout

	result = breadthFirstSearch(start, finish); 	
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	if(result is not success) { 			
\end_layout

\begin_layout Plain Layout

		path = empty stack; 		
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	return path;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Word Ladder discovery function.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Finally, Listing 4 shows the proposed algorithm that will be implemented
 in the A* search function.
 Including the building the solution path back through the graph to the
 start node as done in the classic implementation of Dijkstra's algorithm.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

function aStarSearch(start, goal) {	
\end_layout

\begin_layout Plain Layout

	result = failed;
\end_layout

\begin_layout Plain Layout

	frontier = empty priority queue; 	
\end_layout

\begin_layout Plain Layout

	previous = empty hashtable;	
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	enqueue start to frontier;
\end_layout

\begin_layout Plain Layout

	set pathcost(start) = 0;
\end_layout

\begin_layout Plain Layout

	set distance-cost estimate(start) = 0 + hamming-distance(start);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	while (frontier has items && result is not success) { 			
\end_layout

\begin_layout Plain Layout

		node = dequeue frontier;
\end_layout

\begin_layout Plain Layout

		if(node is goal) { 				
\end_layout

\begin_layout Plain Layout

			result = success; 		
\end_layout

\begin_layout Plain Layout

		} else {
\end_layout

\begin_layout Plain Layout

			tentative_path_cost = get pathcost(node) + 1;
\end_layout

\begin_layout Plain Layout

			for(every child of node){
\end_layout

\begin_layout Plain Layout

				if((child is not visited 
\end_layout

\begin_layout Plain Layout

					OR tentative_path_cost <= pathcost(child)
\end_layout

\begin_layout Plain Layout

					OR pathcost(child) not set)
\end_layout

\begin_layout Plain Layout

					AND frontier does not contain child){
\end_layout

\begin_layout Plain Layout

					
\end_layout

\begin_layout Plain Layout

					set child as visited;
\end_layout

\begin_layout Plain Layout

					set pathcost(child) = tentative_path_cost;
\end_layout

\begin_layout Plain Layout

					set distance-cost estimate(child)
\end_layout

\begin_layout Plain Layout

						= tentative_path_cost + hamming-distance(child, goal);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

					enqueue child in frontier;
\end_layout

\begin_layout Plain Layout

					add entry to previous (key=child, value=node);
\end_layout

\begin_layout Plain Layout

				}		
\end_layout

\begin_layout Plain Layout

			}	
\end_layout

\begin_layout Plain Layout

		}	
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	if(result is success) {
\end_layout

\begin_layout Plain Layout

		current=goal;
\end_layout

\begin_layout Plain Layout

		while(current is not start) {
\end_layout

\begin_layout Plain Layout

			current = get previous (key=current);
\end_layout

\begin_layout Plain Layout

			push curren to path;		
\end_layout

\begin_layout Plain Layout

		} 		
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	return result;
\end_layout

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
A* search algorithm used in discovery mode.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Justification of Algorithms
\end_layout

\begin_layout Standard
In order to solve the problems outlined in the brief for this assignment,
 I have had to research two different approaches to traversing a graph.
 In doing this I considered each option that was available and compared
 each its advantages and disadvantages against the other available options
 and the problem definition.
 In this section I justify why I chose to use a depth-limited search for
 generation and A* search for discovery.
\end_layout

\begin_layout Standard
I chose to use a depth-limited search for generation because the task of
 generating a word ladder basically requires the program to traverse through
 the graph by going as deep as possible (up to the required number of steps
 to generate), as quickly as possible.
 The specification only requires that we generate set of unique words from
 the given word.
 The depth-limited search works taking the stating node and getting all
 of it's neighbors.
 It then checks its neighbors for the first unexplored node and then expands
 it, at which point the program repeats itself.
 Going depth first allows us to generate as many unique nodes as quickly
 as possible, seeing as the goal of generation is not to find an especially
 shallow solution.
\end_layout

\begin_layout Standard
However my algorithm is modified from the standard implementation for a
 depth-limited search as it does not have a 
\begin_inset Quotes eld
\end_inset

target
\begin_inset Quotes erd
\end_inset

 to search for.
 Instead when the program reaches the limit point of the search, this means
 we have managed to traverse the desired number of words in the graph and
 hence a solution has been found.
 Therefore in my implementation, where the program would normally hit the
 limit and return that the search failed, it instead returns that the search
 was successful.
 At this point, as the search ascends back up through the recursive method
 calls, the algorithm pushes each of the current nodes onto a stack so that
 when it reaches the top each of the nodes in the path are in the correct
 order.
\end_layout

\begin_layout Standard
For the discovery mode of the program I have used a different search technique
 to find the target goal.
 In order to find a path between two nodes in the graph, the program needs
 to implement a shortest path search algorithm.
 The depth-limited search is not appropriate for this problem because it
 is not guaranteed to find an optimal solution (as it evaluates deeper nodes
 first).
 Also, because of the depth limit, it is not guaranteed that to even find
 a solution!
\end_layout

\begin_layout Standard
Clearly a different approach must be taken to solve this problem.
 Instead, I researched a variety of different search options to find the
 shortest path between the two nodes.
 Initially I started looking at uninformed search techniques.
 Of the main uninformed search techniques, the solutions which proved to
 be the most appropriate the the problem at hand were breadth-first search
 (with the path building technique outlined in Dijkstra's algorithm) and
 iterative deepening depth-first search.
 Both of these options proved to be acceptable options which would be able
 to find optimum and complete solutions in a reasonable amount of time.
\end_layout

\begin_layout Standard
However, I realized that my function for checking if two strings are adjacent
 could provide additional information that could be of use to the program.
 This function calculated the Hamming distance of two nodes, which is the
 numerical letter difference between two strings.
 I realized that this could potentially be used as a heuristic to guide
 an informed search algorithm to a specified goal, much in the same way
 that an n-puzzle can be solved quicker by using Manhattan distances as
 the heuristic.
 This heuristic is also guaranteed to be admissible no matter what the word,
 as the Hamming distance between any given word and the goal word can never
 be more than the optimal path.
 This means that this particular heuristic will provide us with both an
 optimal and complete solution, assuming one exists.
\end_layout

\begin_layout Standard
I therefore chose to use the A* search algorithm for discovery mode, as
 this generally the most effective informed search technique; considering
 both path cost and a heuristic estimate.
 My implementation uses the Java standard library priority queue with a
 comparable object that I created myself.
 The comparable object is used to compare the distance-cost estimate (that
 is the cost of the current path, plus the Hamming distance of the current
 node) and calculate the difference.
 The node with the lowest score in the list then has the greatest priority
 and is subsequently chosen first.
 The algorithm then proceeds to examine each applicable child node, calculating
 its path cost from the start node (simply an increase of one for every
 edge traversed) and calculating the Hamming distance for the current word.
 As the algorithm adds children to the queue, it also records a link back
 to the parent node so that we can rebuild the path back from the goal to
 the start node.
\end_layout

\begin_layout Standard
I feel that the A* search algorithm is a justified choice for finding the
 shortest path between two nodes in our graph.
 In the worst case scenario, where the start and goal nodes are part of
 unconnected graphs or are connected by a very long path, the search algorithm
 will behave much like a breadth-first search and no additional benefit
 will occur.
 As I was initially planning to use breadth-first search, there is effectively
 no real loss to the time required to traverse the graph, even in the worst
 case scenario.
 But when the heuristic kicks in as the algorithm finds a node seemingly
 closer to the goal, there will be a noticeable reduction in the number
 of nodes that the algorithm has to examine in order to reach the target.
 Simply compare the results of finding a path from the word 
\begin_inset Quotes eld
\end_inset

head
\begin_inset Quotes erd
\end_inset

 to the word 
\begin_inset Quotes eld
\end_inset

foot
\begin_inset Quotes erd
\end_inset

; Breadth-first search will examine 499 nodes before finding an optimal
 path of six nodes, while A* will find a six node path by examining only
 26 nodes.
\end_layout

\begin_layout Section
Testing
\end_layout

\begin_layout Standard
This part of the document outlines the testing of the application.
 It is split into three parts: JUnit testing, Input testing (ensuring that
 correct results are found in discovery/generation) and testing the GUI.
\end_layout

\begin_layout Subsection
JUnit Testing
\end_layout

\begin_layout Standard
During the development of this application I have been using JUnit test
 cases as a quick fire way to check that the systems classes are working
 as expected.
 This was particularly useful when it came to ensuring that the generate
 and discovery modes were working properly as I could check that they were
 returning valid results without having to load the GUI part of the application
 or manually load the dictionary file.
 The full set of JUnit tests are supplied with the deliverables for this
 assignment and can be found in the tests package.
\end_layout

\begin_layout Subsection
Input Testing
\end_layout

\begin_layout Standard
In this section, I use a selection of testing data to check that the algorithms
 for generation and discovery are able to create correct and valid word
 ladders.
 I provide both a test table of the data used and screen shot evidence of
 each test being carried out using the GUI for this application.
\end_layout

\begin_layout Subsubsection
Input Test Table
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="12" columns="6">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="2text%">
<column alignment="left" valignment="top" width="10page%">
<column alignment="left" valignment="top" width="15text%">
<column alignment="left" valignment="top" width="15text%">
<column alignment="left" valignment="top" width="15text%">
<column alignment="left" valignment="top" width="15text%">
<row endhead="true">
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
#
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Mode: (Gen/Dis)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Input
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Expected Outcome
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Actual Outcome
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Comment
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Generate
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Word = 
\begin_inset Quotes eld
\end_inset

hold
\begin_inset Quotes erd
\end_inset

;
\end_layout

\begin_layout Plain Layout
Steps = 10
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
hold, held, meld, mend, tend, tent, text, test, teat, feat
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
As expected
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Generate
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Word = 
\begin_inset Quotes eld
\end_inset

ha
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Plain Layout
Steps = 3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ha, ma, my
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
As expected
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Generate
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Word = 
\begin_inset Quotes eld
\end_inset

how
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Plain Layout
Steps = 5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
how, tow, toy, tot, tor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
As expected
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Generate
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Word = 
\begin_inset Quotes eld
\end_inset

head
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Plain Layout
Steps = 2346
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unable to find path.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
As expected.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of steps was greater than the number of nodes in the graph.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Generate
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Word = 
\begin_inset Quotes eld
\end_inset

head
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Plain Layout
Steps = 1000
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
head, mead, mend, ..., crew, craw
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
As expected.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Discovery
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Start = 
\begin_inset Quotes eld
\end_inset

head
\begin_inset Quotes erd
\end_inset

; 
\end_layout

\begin_layout Plain Layout
Goal = 
\begin_inset Quotes eld
\end_inset

foot
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6 node path; 
\end_layout

\begin_layout Plain Layout
head, bead, beat, boat, boot, foot
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
As expected
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Discovery
\end_layout

\end_inset
</cell>
<cell mroffset="10cm" alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Start = 
\begin_inset Quotes eld
\end_inset

me
\begin_inset Quotes erd
\end_inset

; 
\end_layout

\begin_layout Plain Layout
Goal = 
\begin_inset Quotes eld
\end_inset

do
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4 node path; 
\end_layout

\begin_layout Plain Layout
me, he, ho, do
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
As expected
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Discovery
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Start = 
\begin_inset Quotes eld
\end_inset

fight
\begin_inset Quotes erd
\end_inset

; 
\end_layout

\begin_layout Plain Layout
Goal = 
\begin_inset Quotes eld
\end_inset

deals
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unable to find path.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
As expected
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

Fight
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

deals
\begin_inset Quotes erd
\end_inset

 are unconnected nodes
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Discovery
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Start = 
\begin_inset Quotes eld
\end_inset

bin
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Plain Layout
Goal = 
\begin_inset Quotes eld
\end_inset

bed
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3 node path;
\end_layout

\begin_layout Plain Layout
bin, bid, bed
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
As expected.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Discovery
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Start = 
\begin_inset Quotes eld
\end_inset

tub
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Plain Layout
Goal = 
\begin_inset Quotes eld
\end_inset

hub
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2 node path;
\end_layout

\begin_layout Plain Layout
tub, hub
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
As expected.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
11
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Discovery
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Start = 
\begin_inset Quotes eld
\end_inset

big
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Plain Layout
Goal = 
\begin_inset Quotes eld
\end_inset

big
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1 node path;
\end_layout

\begin_layout Plain Layout
big
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
As expected.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
Screen Shot Evidence of Testing
\end_layout

\begin_layout Standard
Screen shot #1
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename screen-shot1.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
Screen shot #2
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename screen-shot2.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
Screen shot #3
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename screen-shot3.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
Screen shot #4
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename pasted4.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
Screen shot #5
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename screen-shot5.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
Screen shot #6
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename screen-shot6.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
Screen shot #7
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename screen-shot7.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
Screen shot #8
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename screen-shot8.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
Screen shot #9
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename screen-shot9.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
Screen shot #10
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename screen-shot10.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
Screen shot #11
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename screen-shot11.png
	scale 50

\end_inset


\end_layout

\begin_layout Subsection
GUI Testing
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="25" columns="6">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="left" valignment="top" width="17text%">
<column alignment="left" valignment="top" width="17text%">
<column alignment="left" valignment="top" width="17text%">
<column alignment="left" valignment="top" width="17text%">
<column alignment="left" valignment="top" width="17text%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
#
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Testing
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Expected
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Actual
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Comment
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Build Graph
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Select build graph option.
 Choose 
\begin_inset Quotes eld
\end_inset

dict4.dat
\begin_inset Quotes erd
\end_inset

 file.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
File chooser shown.
 Selected file is built into graph.
 Output is updated with confirmation.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
As expected.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Build Graph
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Select build graph option.
 Select cancel.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
File chooser should exit back to main window.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No input file loaded dialog shown.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Logical window showing error.
 Fixed.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Rebuild Graph
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Select rebuild graph.
 Load file when prompted asked.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No input file dialog shown.
 Should then be able to load file and build graph.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
As expected.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Rebuild Graph
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Select rebuild graph.
 Cancel when prompted to load file.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Dialog should exit back to main window.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
As expected.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Rebuild Graph
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Build a graph, then select rebuild graph.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Should remake the graph and output results to text area.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
As expected.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Save Log
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Select save log.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prompted from file name.
 Output is saved to file.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
As expected.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Save Log
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Select save log.
 Click cancel when prompted for name.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prompt exist back to main window.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Failed.
 NullPointerException thrown.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No check for empty input.
 Fixed.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Export to Gephi
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Select export to Gephi without building graph.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Warning that the graph hasn't been built should be shown.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
As expected.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Export to Gephi
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Build a graph then select export to Gephi.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prompted for name of output file.
 Graph exported to file.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
As expected.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Export to Gephi
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Build a graph then select export, click cancel when prompted for filename
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prompt exits back to main window
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Failed.
 Exports graph to 
\begin_inset Quotes eld
\end_inset

null.gexf
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No check for empty input.
 Fixed.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
11
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Generate
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Click generate when no graph is built
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Warning that no graph is built shown
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
As expected.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Generate
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Build graph.
 Run generate mode with values:
\end_layout

\begin_layout Plain Layout
word = 
\begin_inset Quotes eld
\end_inset

hold
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Plain Layout
steps = 10
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10 steps should be generated starting with the word hold.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
As expected.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Generate
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Build graph.
 Run generate but cancel on first prompt.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prompt exits back to main window.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Failed.
 That wasn't a number exception shown.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Program continued even if user clicks cancel on prompt.
 Fixed.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
14
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Generate
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Build graph.
 Run generate but cancel on second prompt
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prompt exits back to main window.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Failed.
 Invalid number exception thrown
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Program reads in null instead of a string.
 Fixed
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
15
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Generate
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Input invalid word.
 
\end_layout

\begin_layout Plain Layout
word = 
\begin_inset Quotes eld
\end_inset

hello
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Error message shown.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
As expected.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Generate
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Input letters instead of a number.
\end_layout

\begin_layout Plain Layout
steps = 
\begin_inset Quotes eld
\end_inset

hi
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Error Message shown
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
As expected.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
17
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Discovery
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Click discovery when no graph is built.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Warning that no graph is built shown
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
As expected.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
18
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Discovery
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Build graph.
 Run discovery but cancel on first prompt.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prompt exits back to main window.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
As expected.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
19
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Discovery
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Build graph.
 Run discovery, but cancel on second prompt
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prompt exits back to main window.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
As expected.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Discovery
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Input an invalid word for the first prompt
\end_layout

\begin_layout Plain Layout
word = 
\begin_inset Quotes eld
\end_inset

hello
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Error message shown.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
As expected.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
21
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Discovery
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Input an invalid word for the second prompt
\end_layout

\begin_layout Plain Layout
word = 
\begin_inset Quotes eld
\end_inset

hi
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Error message shown.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
As expected.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
22
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Discovery
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Input valid words
\end_layout

\begin_layout Plain Layout
start = 
\begin_inset Quotes eld
\end_inset

hold
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Plain Layout
goal = 
\begin_inset Quotes eld
\end_inset

jack
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Output updated with correct path from both nodes.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
As expected.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
23
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
About Dialog
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Click about option from menu.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
About menu shown.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
As expected.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
24
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Exit
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Click exit option from menu.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Program exits
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
As expected.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "refs"
options "plain"

\end_inset


\end_layout

\begin_layout Section*
\start_of_appendix
Source Code Listing
\end_layout

\begin_layout Standard
The rest of this document provides a full print out of the final Java source
 code that makes up my application.
 Full Javadoc and a runnable jar file have also been submitted with the
 electronic copy of the assignment.
\end_layout

\end_body
\end_document
